whos
clear all
; al final de comoando no muestra nada por pantalla
ones(2,2) -> crea matriz de 2x2 con todo unos
	Se pueden hacer matrices de mÃ¡s de 2 dimensiones p.ej ones(5,5,5)

A = [1 3 5 ; 2 4 1 ; 3 3 3 ; 2 1 9] -> matriz 4x3

A = 1:10     -> start at 1,  increment by 1, stop at 10
B = 1:2:10   -> start at 1,  increment by 2, stop at 10
C = 10:-1:3  -> start at 10, decrement by 1, stop at 3

D = []; -> Empty matrix

A = zeros(4,5)                  -> 4-by-5 matrix of all zeros
B = ones (2,3)                  -> 2-by-3 matrix of all ones
C = rand(3,3)                   -> 3-by-3 matrix of uniform random numbers in [0,1]
D = randn(2,5)                  -> 2-by-5 matrix of standard normally distributed numbers
[E,F] = meshgrid(1:5)           -> 5-by-5 grids of numbers
G = eye(4)                      -> 4-by-4 identity matrix
H = diag(1:4)                   -> 4-by-4 diagonal matrix
I = logspace(0,2,6)             -> 1-by-6 matrix of log-spaced numbers from 10^0 to 10^2
J = blkdiag(rand(2,2),ones(3,2))-> 5-by-4 block diagonal matrix
K = tril(ones(3,4))             -> 3-by-4 matrix whose lower triangular part is all ones.
L = triu(ones(3,4))             -> 3-by-4 matrix whose upper triangular part is all ones.
M = magic(6)   			-> Create a magic square in which sum(A,1) = sum(A,2) = trace(A) = trace(rot90(A))

The functions true() and false(), act just like ones() and zeros() but create
logical arrays whose entries take only 1 byte each rather than 32

We can determine the size of a matrix by using the size() command:
	[nrows,ncols] = size(A) -> nrows = 3, ncols = 3 (A is a 3 by 3 matrix)

and the number of elements by using the numel() command.

transpose operator '.
	A = [1 2 3 4 ; 5 6 7 8]
	B = A'

You can use the sum() and mean() functions to sum up or take the average of entries along a certain dimension.

CONCATENATE MATRICES
A = [[1 2 3],ones(1,3)] % concatenate [1 2 3], [1 1 1] along columns
B = [[1 2 3];ones(1,3)] % concatenate [1 2 3], [1 1 1] along rows
	A =
     	1     2     3     1     1     1
	B =
     	1     2     3
     	1     1     1
C = [99 A 42]           % add a number at the beginning or end of an array
D = [A ; A]             % duplicate the whole row

BASIC INDEXING
A = magic(6);
B = A(3,5);              % extract the entry 3 rows down, 5 cols over
C = A([1,2,3],4);        % extract the entries (1,4) ; (2,4) ; (3,4)
D = A(4,[1,1,1]);        % extract the entry (4,1) three times
E = A([2,5],[3,1]);      % extract the entries (2,3) ; (2,1) ; (5,3) ; (5,1)
F = A(:,4);              % extract the fourth column
G = A(4,:);              % extract the fourth row
H = A(:);                % extract every entry as a column vector
I = A(end,3);            % extract the entry in the last row, 3rd column
J = A(end-1,end-1);      % extract the entry in the second to last row & col
K = A(end-4:end,1);      % extract the last three entries from the first col
L = A(2:end,2:end);      % extract everything except the first row and col
M = A(end:-1:1,:);       % extract everything with the order of the rows reversed.
N = diag(A);             % extract the main diagonal of A
O = diag(rot90(A));      % extract the counter diagonal of A
P = diag(A,-2) ;         % extract the diagonal entries two diagonals left and below the main

B1 = A(A > 30)                 % get all elements in A greater than 30
B = A(isprime(A) & (A > 30))   % get all prime elements in A greater than 30

We can check that two matrices are equal, (i.e. the same size with the same elements)
 with the isequal() function. Using the == relation returns a matrix of logical values,
 not a single value.
	test = isequal(B1,B2)
	test2 = all(B1==B2)

DELETION
A([1,3],:) = []         % delete the first and third rows from A
A(:,end) = []           % delete the last column from A

A = zeros(3,5);         % create an empty matrix

RESHAPING
A = zeros(5,6);
A(1:30) = 1:30
B = reshape(A,3,10)
check = A(11) == B(11)

MATRIX OPERATIONS
A = [1 2 3; 4 5 6];
B = A + 1;               % Add or subtract a scalar value from every entry
C = 3.*A;                % Multiply every entry by a scalar value
D = A ./ 3;              % Divide every entry by a scalar value
E = A .^ 3;              % Exponentiate every entry by a scalar value
F = A - [2 4 8 ; 9 1 2]; % Add or subtract two matrices of the same size, (element-wise)
G = A ./ B;              % Divide every entry in A by the corresponding entry in B
H = A .* B;              % Multiply every entry in A by the corresponding entry in B
I = A .^ B;              % Exponentiate every entry in A by the corresponding entry in B

Matlab also supports matrix right division such that X \ Y = (Y' / X')' 
but as this is infrequently used, it should be avoided for the sake of clarity.

PLOTTING

Scatter plots for 2D Data:
	rand('twister',0);                               % seed the random number generator
	X = 5*rand(100,1);  y = rand*X + rand(100,1);    % generate some synthetic data
	f1 = figure;                                     % create a blank figure
	p1 = plot(X,y,'.');                              % plot X vs y
	X1 = X;

Title and axis labels:
	axis([-1,6,-1,5]);
	xlabel('x'); ylabel('y');title('this is the title');

Plotting curves:
	f = @(x) x.^2;                  % create a function of x, namely f(x) = x.^2
	g = @(x) 5*sin(x)+5;            % create a second function of x, g(x) = 5*sin(x) + 5
	res = 0.001;                    % resolution of the plot
	domain = -pi:res:pi;            % the domain of x, (i.e. points at which to evaluate f,g)
	f2 = figure;                    % open a new figure
	p3 = plot(domain,f(domain));    % plot f, w.r.t. x over its domain
	hold on;                        % tell Matlab to add future plots to the same set of axes
	p4 = plot(domain,g(domain));    % plot the second function.